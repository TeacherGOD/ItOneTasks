package ru.itone.course_java.core.basic_collections;

import java.util.List;

/**
 * Реализовать данный интерфейс дерева. В качестве структуры используем самое простое бинарное дерево,
 * в котором в каждом узле может быть по два дочерних узла. "Слева" идут те значения, что "меньше", а справа те что "больше".
 * - Для сравнения двух объектов используйте метод интерфейса {@link Comparable#compareTo(Object)}.
 *
 * @param <T>
 */
public interface BTree<T extends Comparable<T>> {

    /**
     * Метод добавляет новый элемент в дерево
     *
     * @param item Добавляемый элемент
     */
    void add(T item);

    /**
     * Метод удаляет указанный элемент из дерева. При удалении учитывайте 3 возможных случая:
     * - У узла нет дочерних элементов
     * - У узла есть один дочерний элемент
     * - У узла есть два дочерних элемента
     * --------------
     * Ссылка на алгоритм реализации удаления:
     * https://neerc.ifmo.ru/wiki/index.php?title=%D0%94%D0%B5%D1%80%D0%B5%D0%B2%D0%BE_%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B0,_%D0%BD%D0%B0%D0%B8%D0%B2%D0%BD%D0%B0%D1%8F_%D1%80%D0%B5%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F#:~:text=%D0%94%D0%BB%D1%8F%20%D1%83%D0%B4%D0%B0%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D1%83%D0%B7%D0%BB%D0%B0%20%D0%B8%D0%B7%20%D0%B1%D0%B8%D0%BD%D0%B0%D1%80%D0%BD%D0%BE%D0%B3%D0%BE,%D1%83%D0%B7%D0%BB%D0%B0%20%D0%B8%20%D0%B5%D0%B3%D0%BE%20%D0%B4%D0%BE%D1%87%D0%B5%D1%80%D0%BD%D0%B8%D0%BC%20%D1%83%D0%B7%D0%BB%D0%BE%D0%BC.
     *
     * @param item Удаляемый элемент
     */
    void remove(T item);

    /**
     * Метод возвращает
     * true - если указанный объект есть в дереве,
     * false - если указанного объекта нет в дереве
     *
     * @param item Искомый объект
     * @return Есть ли объект в дереве
     */
    boolean contains(T item);

    /**
     * Метод формирует отсортированный в порядке возрастания {@link List} из объектов в узлах дерева.
     *
     * @return Все объекты дерева
     */
    List<T> toList();
}
